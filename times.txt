Naive with prints on every step
16x16 5 rounds: 7.867353, 7.772058, 7.729994
10 rounds: 15.475379, 15.619975, 15.525859
No prints 10 rounds: 0.327480, 0.327423, 0.328089

Huh, so prints are quite the overhead eh?

Okay, prints are satan.


20 rounds of 64 = 0.926022

Concurrent 1.0
100 rounds of 512: 54.822575
Read in time... Lengthy

Using basic system clock generation strategy
100 rounds of 512: 54.984530

on faster generation strategy
#define  IMHT 1024                  //image height
#define  IMWD 1024                  //image width
#define GENERATE 1 //should the grid be generated or read in
#define ROW_LENGTH (IMWD/32) + (IMWD % 32 != 0)
#define WORKERS 8
#define MAXROUNDS 100
#define infname "64x64.pgm"     //put your input image path here
#define outfname "testout.pgm" //put your output image path here
#define ROUNDOUT -1
#define ALIVERATIO 0.4

produces: Processing complete in time: 195.418355

same but with inlines: Processing complete in time: 195.303344

which is weird, maybe xTimeComposer defaults to -O0?

Okay, changed to -O3, and now with or without inlines it's about 4 times faster

Processing complete in time: 55.772685

HMMM

55.7 dark

Generation using rand() strategy:
1024:
0.325387
0.325388
0.325388

64:
0.001564
0.001564

128:
0.005647

512:
0.082707

Number of alive cells on a 1024 board:
Starting with
10%: 12864
20%: 22944
30%: 25984
40%: 25952
50%: 23552
60%: 22720
70%:  8032
80%:
90%:
100%: